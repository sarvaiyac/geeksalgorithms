Test Fraction and Fractional Computation
----------------------------------------

testing default ctor with Fraction f0;
testing fraction == integer with f0 == 0
f0: 0
ok

testing 1-arg ctor with Fraction f1(5);
f1: 5

ok

testing copy ctor with Fraction f2 = f1;
f2: 5

ok

testing fraction == integer with f1 == 5;
ok

testing fraction == fraction with f1 == f2;
ok

testing fraction != fraction with !(f1 != f2);
ok

testing 2 args ctor with Fraction half = Fraction(1, 2);
half: 1/2

testing operator+ with f2 = f1 + half;
f2: 11/2 = 5 + 1/2

testing operator< with f1 < f2;
ok

testing operator<= with f1 <= f2;
ok

testing operator> with f2 > f1;
ok

testing operator>= with f2 >= f1;
ok

testing operator!= with  f2 != f1;
ok

testing operator==, operator- with f1 == f2 - half;
ok

testing 2 args ctor with Fraction oneThird (1, 3);
oneThird: 1/3

testing assignment=, binary  +, -, and unary - with 
                f2 = f1 + oneThird - ( - oneThird );
f2: 17/3 = 5 + 2/3
ok

testing fractional expression with f2 = f1 - oneThird + ( - oneThird );
f2 *: 13/3 = 4 + 1/3
ok

testing post++ with f2 = f1++;
f1 : 6
f2 : 5
ok

testing pre++ with f2 = ++f1;
f1 : 7
f2 : 7
ok

testing post-- with f2 = f1--;
f1 : 6
f2 : 7
ok

testing pre-- with f2 = --f1;
f1 : 5
f2 : 5
ok

testing conversion constructor with f1 = "3/5";
testing infix evaluation with f1 = "3/5";
f1 : 3/5
ok

testing normalization with f1 == "6/10";
f1 : 3/5
ok

computing sum = 1/3 + 1/3 + 1/3 + 1/3 + 1/3 + 1/3 + 1/3 + 1/3 + 1/3 + 1/3
sum: 1/3
sum: 2/3
sum: 1
sum: 4/3 = 1 + 1/3
sum: 5/3 = 1 + 2/3
sum: 2
sum: 7/3 = 2 + 1/3
sum: 8/3 = 2 + 2/3
sum: 3
sum: 10/3 = 3 + 1/3
sum: 10/3 = 3 + 1/3
ok

testing operators * and / with sum = sum * oneThird / oneThird;
sum: 10/3 = 3 + 1/3
ok

computing f3 =  1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10;
f3: 4861/2520 = 1 + 2341/2520
ok

computing (1/2) + (-1/3) + (1/4) + (-1/5) + (1/6) + (-1/7) + (1/8) + (-1/9)

    k              d : s
    -              - : -
    2            0.5 : 1/2
    3       0.166667 : 1/6
    4       0.416667 : 5/12
    5       0.216667 : 13/60
    6       0.383333 : 23/60
    7       0.240476 : 101/420
    8       0.365476 : 307/840
    9       0.254365 : 641/2520
ok

testing operator>> with cin >> f;
Input Expression : 1+((10/100)-(100)/((1000)))+1/2*1/3*2/1*3/1-1/9
f : 17/9 = 1 + 8/9

testing operator +=
f : 8/5 = 1 + 3/5
f : 8/5 = 1 + 3/5
ok

testing operator -=
f : 3/5
ok

testing operator *=
f : 6/35
ok

testing operator /=
f : 2/7
ok

testing Fraction + int
f : 9/7 = 1 + 2/7
ok

testing Fraction - int
f : 2/7
ok

testing int + Fraction
f : 9/7 = 1 + 2/7
ok

testing int - Fraction
f : -2/7
ok

Test over successfully!
Program ended with exit code: 0